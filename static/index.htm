<html>

<head>
    <!---Imports d3 and topojson --->
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <script src="https://d3js.org/topojson.v3.min.js"></script>

    <style type="text/css">
        body {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            padding: 20px;
        }

        #left_panel,
        #contents {
            flex: 1 1 300px;
            /* Allows boxes to grow and shrink, starting with a basis of 300px */
            margin: 10px;
        }

        svg#mapsvg,
        svg#listsvg {
            width: 100%;
            /* Makes SVGs responsive */
            max-width: 600px;
            /* Limits how large the SVGs can grow */
        }

        .tooltip {
            border: 1px solid #ddd;
            background-color: black;
            color: white;
            padding: 5px 10px;
            border-radius: 5px;
            font-size: 14px;
        }

        .label {
            font-weight: bold;
        }

        #left_panel {
            padding: 20px;
            background-color: #ffffff;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            border-radius: 5px;
        }

        #type-selection div,
        #type-selection label {
            margin-bottom: 5px;
        }

        input[type="checkbox"],
        input[type="text"] {
            margin: 10px 0;
            padding: 5px;
        }

        input[type="text"] {
            width: calc(100% - 12px);
            /* Adjust based on padding */
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        #contents {
            margin-left: 20px;
            background-color: #ffffff;
            padding: 20px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            border-radius: 5px;
        }

        .locations-list {
            font-size: 12px;
        }
    </style>

    <style>
        svg#mapsvg {
            fill: None;
        }

        #type-selection input[type='checkbox']:disabled+label {
            color: #999;

            cursor: not-allowed;
        }
    </style>

</head>

<body>
    <div id="left_panel" style="width: 800px;">
        <!-- Search Input at the top -->
        <input type="text" id="searchInput" placeholder="Search Restaurants"><br><br>

        <!-- Highly Rated Filter -->
        <div>
            <input type="checkbox" id="highly-rated-filter"> <label for="highly-rated-filter">Highly Rated
                (4.5+)</label><br><br>
        </div>

        <!-- Container for Type Selection and Neighborhood Selection -->
        <div id="filters-container" style="display: flex;">
            <!-- Select Types -->
            <div id="type-selection" style="flex: 1; margin-right: 20px;">
                <div>Select Types:</div>
                <button id="selectAll-button">Select All</button>
                <button id="clear-button">Clear Selections</button>
                <!-- <input type="checkbox" id="select-all" checked> <label for="select-all">Select All</label><br> -->
                <!-- Dynamically populate types as checkboxes will be inserted here -->
            </div>

            <!-- Select Neighborhood -->
            <div id="neighborhood-selection" style="flex: 1;">
                <div>Select Neighborhood:</div>
                <!-- Dynamically populated checkboxes will go here -->
            </div>
        </div>
    </div>


    <div id="contents" style="float:left; width:600px;">
        <svg id="mapsvg" height="600" width="600"></svg>
    </div>

    <div id="contents" style="float:right; width:650px;">
        <svg id="listsvg" height="6000" width="600"></svg>
    </div>

    <script>
        const mapsvg = d3.select("svg#mapsvg");
        width = mapsvg.attr("width");
        height = mapsvg.attr("height");
        const margin = { top: 10, right: 10, bottom: 10, left: 10 };
        const mapWidth = width - margin.left - margin.right;
        const mapHeight = height - margin.top - margin.bottom;



        const listsvg = d3.select("svg#listsvg");
        listwidth = listsvg.attr("width");
        listheight = listsvg.attr("height");
        const listWidth = listwidth - margin.left - margin.right;
        const listHeight = listheight - margin.top - margin.bottom;


        const requestData = async function () {
            const bostonjson = await d3.json("./boston.topo.json")
            // console.log(bostonjson);
            var neigh = topojson.feature(bostonjson, bostonjson.objects.boston)
            var neighMesh = topojson.mesh(bostonjson, bostonjson.objects.boston)
            // console.log("sadge")
            // console.log(neigh)
            var projection = d3.geoMercator().fitSize([mapWidth, mapHeight], neigh);
            var path = d3.geoPath().projection(projection);

            let bostonmap = mapsvg.append("g").attr("id", "bostonmap");
            let neighborPaths = bostonmap.selectAll("path.neighbors").data(neigh.features)
                .join("path")
                .attr("class", "neighbors")
                .attr("d", path)
                .style("fill", "lightgray");

            // console.log(neighMesh)
            let neighborPath = bostonmap.append("path").datum(neighMesh)
                .attr("class", "outline")
                .attr("d", path)
                .style("stroke", "white")
                .attr("class", "neighbor-outline")
                .style("stroke-width", 1);


            d3.csv('./yelp_boston.csv', d3.autoType)
                .then((data) => {
                    // console.log(data)

                    var bostonPoints = []

                    data.forEach(function (point) {
                        var projectedPoint = projection([point.longitude, point.latitude]);

                        var pointInNeighborhood = false;
                        neigh.features.forEach(function (neighborhood) {
                            var pathGenerator = d3.geoPath().projection(projection);
                            if (d3.geoContains(neighborhood, [point.longitude, point.latitude])) {
                                pointInNeighborhood = true;
                            }
                        });

                        //point is in boston map
                        if (pointInNeighborhood) {
                            bostonPoints.push(point);
                        }
                    });

                    // Assuming this part comes after you've already defined and populated `bostonPoints`
                    const searchExtent = [
                        "restaurants", "coffee", "newamerican", "french", "sandwiches", "cafes", "indpak",
                        "sushi", "japanese", "chinese", "mexican", "thai", "pizza", "donuts", "bakeries",
                        "italian", "vietnamese", "ethnicmarkets"
                    ];

                    // Mapping for renaming, if necessary
                    const renameMapping = {
                        "newamerican": "New American",
                        "indpak": "Indian",
                        "ethnicmarkets": "Ethnic Markets",
                    };
                    // console.log("searchextent")
                    // console.log(searchExtent)
                    searchScale = d3.scaleOrdinal().domain(searchExtent).range(d3.schemeTableau10)

                    const revExtent = d3.extent(data, d => d['review_count']);
                    const revScale = d3.scaleLinear().domain(revExtent).range([0.3, 0.5]);

                    const ratingExtent = d3.extent(data, d => d['rating']);
                    const ratingScale = d3.scaleLinear().domain(ratingExtent).range([5, 10]);


                    // console.log(bostonPoints)


                    const typeSelectionDiv = d3.select("#type-selection");
                    // console.log("searchExtent")
                    // console.log(searchExtent)
                    searchExtent.forEach(function (type) {
                        var renamedType = renameMapping[type] || type.charAt(0).toUpperCase() + type.slice(1); // Capitalize first letter if not renamed
                        var checkboxLabel = typeSelectionDiv.append("label")
                            .style("display", "block") // Ensure each checkbox appears on a new line
                            .style("margin-right", "15px");
                        checkboxLabel.append("input")
                            .attr("type", "checkbox")
                            .attr("name", "type")
                            .attr("value", type)
                            .attr("id", `type-${type}`) // Assign an ID for label 'for' attribute
                            .style("margin-right", "5px");

                        checkboxLabel.append("span") // Changed from 'text' to 'span' for correct DOM appending
                            .text(renamedType);

                        // Optional: If you want a line break after each checkbox (may not be necessary with 'display: block')
                        // checkboxLabel.append("br");
                    });

                    let uniqueNeighborhoods = new Set(data.map(d => d.neighborhood).filter(Boolean));

                    const neighborhoodSelectionDiv = d3.select("#neighborhood-selection");
                    uniqueNeighborhoods.forEach(function (neighborhood) {
                        var checkboxLabel = neighborhoodSelectionDiv.append("label")
                            .style("display", "block"); // Ensures each checkbox appears on a new line
                        checkboxLabel.append("input")
                            .attr("type", "checkbox")
                            .attr("name", "neighborhood")
                            .attr("value", neighborhood)
                            .style("margin-right", "5px");
                        checkboxLabel.append("span")
                            .text(neighborhood);
                    });


                    var selectedTypes = [];
                    var selectAllButton = d3.select("#selectAll-button")
                        .on("click", function () {
                            d3.selectAll("#type-selection input[type='checkbox']").property("checked", true);
                            selectedTypes = searchExtent;
                            console.log(selectedTypes)
                            updateCircles(bostonPoints, ranges, selectedTypes, k);
                        })


                    // console.log(selectedTypes)

                    var clearButton = d3.select("#clear-button")
                        .on("click", function () {
                            d3.selectAll("#type-selection input[type='checkbox']").property("checked", false);
                            // console.log(selectedTypes)
                            selectedTypes = [];
                            updateCircles(bostonPoints, ranges, selectedTypes, k);
                        })

                    const numTypes = searchExtent.length;
                    // console.log("lenght")
                    // console.log(selectedTypes)
                    d3.selectAll("#type-selection input[type='checkbox']")
                        .on("change", function (event) {
                            console.log(this.checked)
                            if (this.checked) {
                                selectedTypes.push(this.value);
                            }
                            else {
                                var idx = selectedTypes.indexOf(this.value);
                                if (idx !== -1) {
                                    selectedTypes.splice(idx, 1);
                                }
                            }
                            console.log(selectedTypes)
                            updateCircles(bostonPoints, ranges, selectedTypes, k);
                        });

                    var circles = bostonmap.selectAll("circle").data(bostonPoints)
                        .join("circle")
                        .attr("cx", d => projection([d['longitude'], d['latitude']])[0])
                        .attr("cy", d => projection([d['longitude'], d['latitude']])[1])
                        .attr("r", d => ratingScale(d['rating']))
                        .attr("opacity", d => revScale(d['review_count']))
                        .attr("fill", d => searchScale(d['search category']))
                        .attr("title", d => d.name) // Add tooltip text
                        .on("mouseover", overfn)
                        .on("mouseout", outfn);

                    var zoom = d3.zoom()
                        .scaleExtent([1, 10])
                        .on("zoom", func);

                    mapsvg.call(zoom);
                    mapsvg.call(zoom.transform, d3.zoomIdentity)
                    var k = 1;
                    function func({ transform }) {
                        bostonmap.attr("transform", transform.toString());
                        bostonmap.select(".neighbor-outline")
                            .style("stroke-width", 1 / transform.k);
                        circles = bostonmap.selectAll("circle")
                            .attr("r", d => ratingScale(d['rating']) / transform.k)
                        // console.log(transform.k)
                        k = transform.k
                    }

                    listsvg.append("text")
                        .attr("class", "list-title")
                        .attr("x", 10)
                        .attr("y", 20)
                        .attr("text-anchor", "left")
                        .style("font-weight", "bold")
                        .text("Name");

                    listsvg.append("text")
                        .attr("class", "list-title")
                        .attr("x", 300)
                        .attr("y", 20)
                        .attr("text-anchor", "left")
                        .style("font-weight", "bold")
                        .text("Rating");

                    listsvg.append("text")
                        .attr("class", "list-title")
                        .attr("x", 370)
                        .attr("y", 20)
                        .attr("text-anchor", "left")
                        .style("font-weight", "bold")
                        .text("Number of reviews");

                    const ydict = new Map();

                    // console.log(bostonPoints)
                    for (q = 0; q < bostonPoints.length; q++) {

                        ydict.set(bostonPoints[q].name, 45 + 20 * q)

                        listsvg.append("text")
                            .attr("class", "locations-list")
                            .attr("x", 10)
                            .attr("y", 45 + 20 * q)
                            .attr("text-anchor", "left")
                            .text(bostonPoints[q].name);

                        listsvg.append("text")
                            .attr("class", "locations-list")
                            .attr("x", 300)
                            .attr("y", 45 + 20 * q)
                            .attr("text-anchor", "left")
                            .text(bostonPoints[q].rating);

                        listsvg.append("text")
                            .attr("class", "locations-list")
                            .attr("x", 370)
                            .attr("y", 45 + 20 * q)
                            .attr("text-anchor", "left")
                            .text(bostonPoints[q]["review_count"]);
                    }


                    function overfn(event, d) {
                        d3.select(this)
                            .attr("stroke", "black")
                            .attr("stroke-width", 2 / k);

                        // atempting to highlight words
                        listsvg.append('rect')
                            .attr("x", 1)
                            .attr("y", ydict.get(d['name']) - 15)
                            .attr("width", 600)
                            .attr("height", 15)
                            .attr("fill", "yellow")
                            .attr("opacity", 0.2);
                        showTooltip(event, d);
                    }

                    function outfn(event, d) {
                        d3.select(this)
                            .attr("stroke", "none")

                        d3.selectAll("rect")
                            .remove();

                        hideTooltip();
                    }

                    function getSelectedNeighborhoods() {
                        let selectedNeighborhoods = [];
                        d3.selectAll("#neighborhood-selection input[type='checkbox']:checked").each(function () {
                            selectedNeighborhoods.push(this.value);
                        });
                        return selectedNeighborhoods;
                    }



                    function updateCircles(data, range, selectedTypes, k) {


                        const highlyRatedChecked = d3.select("#highly-rated-filter").property("checked");

                        // Filter data based on the selected types and highly rated filter
                        let selectedNeighborhoods = getSelectedNeighborhoods();
                        // console.log(selectedNeighborhoods)

                        let filteredData = data.filter(d => {
                            const ratingMatch = d.rating >= range[0] && d.rating <= range[1];
                            // console.log(selectedTypes)
                            const typeMatch = selectedTypes.indexOf(d["search category"]) !== -1;
                            // console.log(typeMatch)
                            const neighborhoodMatch = selectedNeighborhoods.length === 0 || selectedNeighborhoods.includes(d.neighborhood);
                            return ratingMatch && typeMatch && neighborhoodMatch;
                        });


                        d3.selectAll("#type-selection input[type='checkbox']").each(function () {

                            if (this.checked && !selectedTypes.includes(this.value)) {
                                selectedTypes.push(this.value);
                            }
                            else if (!this.checked && selectedTypes.includes(this.value)) {
                                selectedTypes = selectedTypes.filter(item => item !== this.value);
                            };
                        });

                        // console.log(filteredData);

                        var removedText = d3.selectAll(".locations-list")
                            .remove();

                        for (q = 0; q < filteredData.length; q++) {
                            ydict.set(filteredData[q].name, 45 + 20 * q)

                            listsvg.append("text")
                                .attr("class", "locations-list")
                                .attr("x", 10)
                                .attr("y", 45 + 20 * q)
                                .attr("text-anchor", "left")
                                .text(filteredData[q].name);

                            listsvg.append("text")
                                .attr("class", "locations-list")
                                .attr("x", 300)
                                .attr("y", 45 + 20 * q)
                                .attr("text-anchor", "left")
                                .text(filteredData[q].rating);

                            listsvg.append("text")
                                .attr("class", "locations-list")
                                .attr("x", 370)
                                .attr("y", 45 + 20 * q)
                                .attr("text-anchor", "left")
                                .text(filteredData[q]["review_count"]);
                        }

                        circles = bostonmap.selectAll("circle")
                            .data(filteredData)
                            .attr("cx", d => projection([d['longitude'], d['latitude']])[0])
                            .attr("cy", d => projection([d['longitude'], d['latitude']])[1])
                            .attr("r", d => ratingScale(d['rating']) / k)
                            .attr("opacity", d => revScale(d['review_count']))
                            .attr("fill", d => searchScale(d['search category']))
                            .on("mouseover", overfn)
                            .on("mouseout", outfn);

                        circles.exit().remove();

                        circles.enter()
                            .append("circle")
                            .attr("cx", d => projection([d['longitude'], d['latitude']])[0])
                            .attr("cy", d => projection([d['longitude'], d['latitude']])[1])
                            .attr("r", d => ratingScale(d['rating']) / k)
                            .attr("opacity", d => revScale(d['review_count']))
                            .attr("fill", d => searchScale(d['search category']))
                            .on("mouseover", overfn)
                            .on("mouseout", outfn);
                    }

                    var ranges = [0, 5]

                    function showTooltip(event, data) {
                        const tooltip = d3.select("body").append("div")
                            .attr("class", "tooltip")
                            .style("position", "absolute")
                            .style("pointer-events", "none")
                            .style("background-color", "rgba(0, 0, 0, 0.8)")
                            .style("color", "white")
                            .style("padding", "10px")
                            .style("border-radius", "5px")
                            .style("font-size", "12px");

                        tooltip.append("div")
                            .style("font-weight", "bold")
                            .text("Name: " + data.name);

                        tooltip.append("div")
                            .text("Rating: " + data.rating);

                        tooltip.append("div")
                            .text("Reviews: " + data.review_count);

                        const x = event.pageX;
                        const y = event.pageY;

                        tooltip.style("left", x + "px")
                            .style("top", y + "px");
                    }


                    // Function to hide tooltip
                    function hideTooltip() {
                        d3.select(".tooltip").remove();
                    }

                    // Function to update circles based on filters
                    function updateCirclesByFilters() {
                        const highlyRatedChecked = d3.select("#highly-rated-filter").property("checked");

                        // Filter data based on the selected filters
                        let filteredData = bostonPoints.filter(d => {
                            if (highlyRatedChecked) {
                                return d.rating >= 4.5;
                            } else {
                                return true; // Show all establishments
                            }
                        });

                        // Update circles based on filtered data
                        updateCircles(filteredData, ranges, selectedTypes, k);
                    }

                    // Handle change event for highly rated filter
                    d3.select("#highly-rated-filter").on("change", updateCirclesByFilters);

                    // Call the function initially to set up the default view
                    updateCirclesByFilters();

                    d3.selectAll("#neighborhood-selection input[type='checkbox']")
                        .on("change", function () {
                            // Assuming other filter states (range, selectedTypes) are correctly maintained
                            updateCircles(bostonPoints, ranges, selectedTypes, k);
                        });


                    d3.select("#searchInput").on("input", function () {
                        const searchQuery = this.value.toLowerCase().trim();
                        handleSearch(searchQuery);
                    });

                    function handleSearch(searchQuery = '') {
                        let filteredData;
                        if (searchQuery) {
                            filteredData = bostonPoints.filter(d => d.name.toLowerCase().includes(searchQuery));
                        } else {
                            filteredData = bostonPoints;
                        }

                        // Update circles based on search results
                        circles = bostonmap.selectAll("circle")
                            .data(filteredData, d => d.id);

                        // Update circles' position and attributes
                        circles.enter().append("circle")
                            .attr("cx", d => projection([d.longitude, d.latitude])[0])
                            .attr("cy", d => projection([d.longitude, d.latitude])[1])
                            .attr("r", d => ratingScale(d.rating))
                            .attr("opacity", d => revScale(d.review_count))
                            .attr("fill", d => searchScale(d['search category']))
                            .on("mouseover", overfn)
                            .on("mouseout", outfn)
                            .merge(circles)
                            .attr("cx", d => projection([d.longitude, d.latitude])[0])
                            .attr("cy", d => projection([d.longitude, d.latitude])[1])
                            .attr("r", d => ratingScale(d.rating))
                            .attr("opacity", d => revScale(d.review_count))
                            .attr("fill", d => searchScale(d['search category']));

                        // Remove circles that don't match the search query
                        circles.exit().remove();

                        // Update tooltip content based on search results

                        // Clear search results and reset circles if search input is empty
                        if (!searchQuery) {
                            circles = bostonmap.selectAll("circle")
                                .data(bostonPoints, d => d.id)
                                .attr("cx", d => projection([d.longitude, d.latitude])[0])
                                .attr("cy", d => projection([d.longitude, d.latitude])[1])
                                .attr("r", d => ratingScale(d.rating))
                                .attr("opacity", d => revScale(d.review_count))
                                .attr("fill", d => searchScale(d['search category']))
                                .on("mouseover", overfn)
                                .on("mouseout", outfn);
                        }
                    }

                })
        }

        requestData();

    </script>

</body>